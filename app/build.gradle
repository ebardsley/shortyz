buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://jitpack.io" }
}


android {
    Properties props = new Properties()

    def propsPath = System.getProperty("user.home") + "/androidkeyinfo.properties"

    if (new File(propsPath).exists())
        props.load(new FileInputStream(propsPath))

    compileSdkVersion 25
    buildToolsVersion "25.0.1"

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        if (file(System.getProperty("user.home") + "/androidkeystore").exists()) {
            debugSigned {
                storeFile file(System.getProperty("user.home") + "/androidkeystore")
                storePassword props.getProperty("storePassword")
                keyAlias "robert \"kebernet\" cooper"
                keyPassword props.getProperty("keyPassword")
            }
        }
        release {
            storeFile file(System.getProperty("user.home") + "/androidkeystore")
            storePassword props.getProperty("storePassword")
            keyAlias "robert \"kebernet\" cooper"
            keyPassword props.getProperty("keyPassword")
        }
    }

    buildTypes {
        debug {
        }
        if (file(System.getProperty("user.home") + "/androidkeystore").exists()) {
            debugSigned {
                signingConfig signingConfigs.debugSigned
            }
        }
        if (file(System.getProperty("user.home") + "/androidkeystore").exists()) {
            release {
                signingConfig signingConfigs.release
                minifyEnabled true
                proguardFile file('src/main/assemble/proguard-android.txt')
            }
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:25.1.0'
    compile 'com.android.support:recyclerview-v7:25.1.0'
    compile 'com.google.android.gms:play-services:4.0.30'
    compile project(":puzlib")
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.jenzz:materialpreference:1.3'
    compile 'com.android.support:design:25.1.0'
    compile ('com.google.api-client:google-api-client:1.21.0'){
        exclude group: 'org.apache.httpcomponents'
    }
    compile ('com.google.api-client:google-api-client-android:1.21.0'){
        exclude group: 'org.apache.httpcomponents'
    }
    compile ('com.google.api-client:google-api-client-gson:1.21.0'){
        exclude group: 'org.apache.httpcomponents'
    }
    compile ('com.google.apis:google-api-services-gmail:v1-rev29-1.20.0'){
        exclude group: 'org.apache.httpcomponents'
    }
    androidTestCompile 'com.jayway.android.robotium:robotium-solo:4.3.1'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }
}

task prepareChrome << {
    def slurp = new XmlSlurper().parse(file("src/main/AndroidManifest.xml"))
    def versionCode = slurp.'@android:versionCode'.text()
    def versionName = slurp.'@android:versionName'.text()
    copy {
        from("src/main/chrome") {
            include "**/*.json"
            include "**/*.html"
            filter {
                it.replaceAll('@@versionCode@@', versionCode)
                        .replaceAll('@@versionName@@', versionName)
            }
        }
        into "build/chrome"
    }
    copy {
        from("src/main/chrome") {
            exclude "**/*.json"
            exclude "**/*.html"
        }
        into "build/chrome"
    }
}

task assembleChrome << {
    copy {
        from "build/outputs/apk/app-release.apk"
        into "build/chrome/vendor/chromium/crx"
    }
}
tasks.assembleChrome.dependsOn "prepareChrome"
tasks.assembleChrome.dependsOn "assembleRelease"

task packageChrome(type: Zip) {
    from "build/chrome"
    archiveName "shortyz-chrome.zip"
}
tasks.packageChrome.dependsOn assembleChrome

tasks.build.dependsOn packageChrome
